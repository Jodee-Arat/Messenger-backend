
generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id        String   @id @default(cuid())

  username      String @unique
  email     String   @unique
  password  String

  isDeactivated Boolean @default(false) @map("is_deactivated")
  deactivatedAt DateTime? @map("deactivated_at")

  messages     ChatMessage[] 
  chatMemberships ChatMember[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model ChatMessage {
  id          String      @id @default(uuid())

  type        MessageType @default(TEXT)
  text        String?     // Необязательное, если, например, только image
  imageUrl    String?     // Для изображений (можно расширить до других типов)
  fileUrl     String?     // Для вложений (документы и т.д.)

  isEdited    Boolean     @default(false)
  isDeleted   Boolean     @default(false)

  replyTo     ChatMessage?   @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: Cascade)
  replyToId   String?

  replies     ChatMessage[]  @relation("MessageReplies") // ← обратная сторона связи

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String       @map("user_id")

  chat      Chat       @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String       @map("chat_id")

  readCount String? @map("read_count")

  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  @@map("chat_messages")
}

model Chat {
  id          String         @id @default(uuid())
  chatName        String?     @map("chat_name")
  isGroup     Boolean        @default(false)
  avatarUrl   String?     @map("avatar_url")
  isDeleted   Boolean        @default(false)

  messages    ChatMessage[]
  members     ChatMember[]

  lastMessageAt DateTime? @map("last_message_at")

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  

  @@map("chats")
}

model ChatMember {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")

  isCreator Boolean? @default(false) @map("is_creator")

  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String   @map("chat_id")

  joinedAt  DateTime @default(now())

  @@unique([userId, chatId])
  @@map("chat_members")
}


enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

