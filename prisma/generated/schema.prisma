generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id String @id @default(cuid())

  username String @unique
  email    String @unique
  password String

  isDeactivated Boolean   @default(false) @map("is_deactivated")
  deactivatedAt DateTime? @map("deactivated_at")

  messages        ChatMessage[]
  chatMemberships ChatMember[]

  clientKey ClientKey?

  keyDiffie KeyDiffie?

  files FileMessage[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model ChatMessage {
  id String @id @default(uuid())

  text String?

  isStarted Boolean @default(false) @map("is_started")
  isFake    Boolean @default(false) @map("is_fake")
  isEdited  Boolean @default(false) @map("is_edited")
  isDeleted Boolean @default(false) @map("is_deleted")

  files FileMessage[]

  replyTo   ChatMessage? @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: Cascade)
  replyToId String?

  replies ChatMessage[] @relation("MessageReplies")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String @map("chat_id")

  readCount String? @map("read_count")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("chat_messages")
}

model FileMessage {
  id String @id @default(uuid())

  fileUrl      String
  fileName     String
  fileFullName String
  fileSize     String
  fileFormat   String

  chatMessage   ChatMessage @relation(fields: [chatMessageId], references: [id], onDelete: Cascade)
  chatMessageId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String @map("chat_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("file_messages")
}

model Chat {
  id        String  @id @default(uuid())
  chatName  String? @map("chat_name")
  isGroup   Boolean @default(false)
  avatarUrl String? @map("avatar_url")
  isDeleted Boolean @default(false)

  messages  ChatMessage[]
  members   ChatMember[]
  files     FileMessage[]
  serverKey ServerKey?

  lastMessageAt DateTime? @map("last_message_at")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chats")
}

model ChatMember {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  isCreator Boolean? @default(false) @map("is_creator")

  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String @map("chat_id")

  joinedAt DateTime @default(now())

  @@unique([userId, chatId])
  @@map("chat_members")
}

model ClientKey {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  publicKeyE BigInt
  publicKeyN BigInt
  sessionKey BigInt

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("client_keys")
}

model ServerKey {
  id String @id @default(uuid())

  publicKeyE  BigInt
  publicKeyN  BigInt
  privateKeyD BigInt
  privateKeyP BigInt
  privateKeyQ BigInt

  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String @unique @map("chat_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("server_keys")
}

model KeyDiffie {
  id String @id @default(uuid())

  publicKeyP       BigInt
  publicKeyG       BigInt
  privateKeyServer BigInt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("keys_diffie")
}
